import os
import time
import threading
import requests
from typing import Dict, Any, Optional, List
from fastapi import FastAPI
from fastapi.responses import PlainTextResponse

# ========= CONFIG =========
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_ID = int(os.getenv("ADMIN_ID", "0").strip() or "0")
BASE_URL = os.getenv("BASE_URL", "").strip()  # –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ; –ø—Ä–æ—Å—Ç–æ –¥–ª—è /health
TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

if not BOT_TOKEN or not ADMIN_ID:
    raise RuntimeError("Set env vars BOT_TOKEN and ADMIN_ID")

# ========= APP =========
app = FastAPI()

# ========= STATE (in-memory) =========
last_update_id = 0
user_states: Dict[int, str] = {}        # chat_id -> "lead_name_wait" / "lead_text_wait" / "" ...
user_leads: Dict[int, Dict[str, Any]] = {}  # —Ç–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

# ========= COMMON =========
def tg_call(method: str, payload: Dict[str, Any]) -> Dict[str, Any]:
    url = f"{TELEGRAM_API}/{method}"
    r = requests.post(url, json=payload, timeout=30)
    try:
        return r.json()
    except Exception:
        return {"ok": False, "error": r.text}

def send_msg(chat_id: int, text: str, kb: Optional[Dict] = None, parse: str = "HTML"):
    payload = {"chat_id": chat_id, "text": text, "parse_mode": parse}
    if kb:
        payload["reply_markup"] = kb
    return tg_call("sendMessage", payload)

def edit_msg(chat_id: int, msg_id: int, text: str, kb: Optional[Dict] = None, parse: str = "HTML"):
    payload = {"chat_id": chat_id, "message_id": msg_id, "text": text, "parse_mode": parse}
    if kb:
        payload["reply_markup"] = kb
    return tg_call("editMessageText", payload)

def answer_cb(cb_id: str, text: str = "", alert: bool = False):
    return tg_call("answerCallbackQuery", {"callback_query_id": cb_id, "text": text, "show_alert": alert})

# ========= KEYBOARDS =========
def reply_menu():
    return {
        "keyboard": [
            [{"text": "üìù –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É"}],
            [{"text": "üîÆ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–æ–ø–∏—Å)"}],
            [{"text": "üïØ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞"}],
            [{"text": "‚¨ÖÔ∏è –ú–µ–Ω—é"}],
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def ikb_lead_controls(user_chat_id: int):
    return {
        "inline_keyboard": [[
            {"text": "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", "callback_data": f"lead|accept|{user_chat_id}"},
            {"text": "‚ùì –£—Ç–æ—á–Ω–∏—Ç–∏", "callback_data": f"lead|clarify|{user_chat_id}"},
            {"text": "‚õî –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", "callback_data": f"lead|reject|{user_chat_id}"},
        ]]
    }

# ========= TEMPLATES =========
WELCOME = (
    "–í—ñ—Ç–∞—é! –Ø –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º.\n"
    "–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
)
HINT_APPLY = (
    "üìù <b>–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É</b>\n\n"
    "–ù–∞–ø–∏—à–∏ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:\n"
    "‚Ä¢ –Ü–º‚Äô—è\n"
    "‚Ä¢ @–Ω—ñ–∫ –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å/–∫–∞–Ω–∞–ª\n"
    "‚Ä¢ –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ (–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞/–Ω–∞–≤—á–∞–Ω–Ω—è/—ñ–Ω—à–µ)\n"
    "‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –∑–∞–ø–∏—Ç—É.\n\n"
    "–ü—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —è –ø–µ—Ä–µ–¥–∞–º –∑–∞—è–≤–∫—É —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Å—å —ñ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é."
)
HINT_DIAG = (
    "üîÆ <b>–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–æ–ø–∏—Å)</b>\n\n"
    "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ <i>—â–æ —Å–∞–º–µ –±–æ–ª–∏—Ç—å</i> —ñ <i>—á–æ–≥–æ —Ö–æ—á–µ—à –¥–æ—Å—è–≥—Ç–∏</i>.\n"
    "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
    "‚Ä¢ ¬´–ü–æ—Å—Ç—ñ–π–Ω–∞ –≤—Ç–æ–º–∞, –ø—Ä–æ–≤–∞–ª–∏ –≤ –µ–Ω–µ—Ä–≥—ñ—ó ‚Äî —Ö–æ—á—É –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –ø—Ä–∏—á–∏–Ω—É¬ª\n"
    "‚Ä¢ ¬´–°—Ç–æ—Å—É–Ω–∫–∏ –∑ —á–æ–ª–æ–≤—ñ–∫–æ–º –∑–∞—Å—Ç–∏–≥–ª–∏ ‚Äî —â–æ –±–ª–æ–∫—É—î?¬ª\n"
    "‚Ä¢ ¬´–ì—Ä–æ—à—ñ –π–¥—É—Ç—å, –Ω–µ –∑–∞—Ç—Ä–∏–º—É—é—Ç—å—Å—è ‚Äî –¥–µ –¥—ñ—Ä–∫–∞?¬ª"
)
HINT_SUPPORT = (
    "üïØ <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞</b>\n\n"
    "–ú–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî —ñ —è –ø—ñ–¥–∫–∞–∂—É, –∫—É–¥–∏ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏. "
    "–Ø–∫—â–æ —â–æ—Å—å —Ç–µ—Ä–º—ñ–Ω–æ–≤–µ ‚Äî –∫–∏–Ω—å –æ–ø–∏—Å, —è –ø–æ–∑–Ω–∞—á—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–æ."
)
AFTER_SENT = "–î—è–∫—É—é! –ó–∞—è–≤–∫—É/–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ üïØ"

# ========= ADMIN TEMPLATES =========
def admin_lead_text(user_id: int, name: str, username: str, text: str) -> str:
    uu = f"@{username}" if username else "‚Äî"
    return (
        "üîî <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ (–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)</b>!\n"
        f"üßë‚Äçüíº <b>–Ü–º‚Äô—è:</b> {name}\n"
        f"ü™™ <b>ID:</b> {user_id}\n"
        f"üì¢ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {uu}\n"
        f"‚úçÔ∏è <b>–¢–µ–∫—Å—Ç:</b> {text}"
    )

ACCEPT_MSG = (
    "‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞.</b>\n"
    "–ú–∏ –Ω–∞ –∑–≤‚Äô—è–∑–∫—É. –ü—Ä–æ—Ç—è–≥–æ–º –¥–æ–±–∏ –Ω–∞–¥–∞–º–æ –¥–µ—Ç–∞–ª—ñ —â–æ–¥–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏/–Ω–∞–≤—á–∞–Ω–Ω—è üïØ"
)
REJECT_MSG = (
    "‚õî <b>–ó–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.</b>\n"
    "–ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –≤–∑—è—Ç–∏ –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ —É—Ç–æ—á–Ω–∏ –¥–µ—Ç–∞–ª—ñ."
)
CLARIFY_MSG = (
    "‚ùì <b>–£—Ç–æ—á–Ω–µ–Ω–Ω—è</b>\n"
    "–ù–∞–ø–∏—à–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç—Ä–æ—Ö–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ: –∫–æ–ª–∏ –ø–æ—á–∞–ª–æ—Å—è, —è–∫—ñ –≤—ñ–¥—á—É—Ç—Ç—è/—Å–∏—Ç—É–∞—Ü—ñ—ó, "
    "—á–∏ –±—É–ª–∏ –ø–æ–¥—ñ—ó –Ω–∞–ø–µ—Ä–µ–¥–æ–¥–Ω—ñ."
)

# ========= LOGIC =========
def reset_user(chat_id: int):
    user_states.pop(chat_id, None)
    user_leads.pop(chat_id, None)

def handle_text(chat_id: int, text: str, from_user: Dict[str, Any]):
    t = text.strip()

    # —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–µ –º–µ–Ω—é
    if t in ("/start", "‚¨ÖÔ∏è –ú–µ–Ω—é", "–ú–µ–Ω—é"):
        reset_user(chat_id)
        send_msg(chat_id, WELCOME, reply_menu())
        return

    # —Å—Ç–∞—Ä—Ç–æ–≤—ñ –∫–Ω–æ–ø–∫–∏
    if t.startswith("üìù"):
        reset_user(chat_id)
        user_states[chat_id] = "lead_wait_all_fields"
        send_msg(chat_id, HINT_APPLY, reply_menu())
        return

    if t.startswith("üîÆ"):
        reset_user(chat_id)
        user_states[chat_id] = "diag_wait_text"
        send_msg(chat_id, HINT_DIAG, reply_menu())
        return

    if t.startswith("üïØ"):
        reset_user(chat_id)
        send_msg(chat_id, HINT_SUPPORT, reply_menu())
        return

    # —è–∫—â–æ —á–µ–∫–∞—î–º–æ –∑–∞—è–≤–∫—É –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
    st = user_states.get(chat_id, "")
    if st == "lead_wait_all_fields":
        name = (from_user.get("first_name") or "").strip() or "‚Äî"
        username = from_user.get("username") or ""
        user_leads[chat_id] = {"name": name, "username": username, "text": t}
        # –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞
        admin_text = admin_lead_text(chat_id, name, username, t)
        send_msg(ADMIN_ID, admin_text, ikb_lead_controls(chat_id))
        send_msg(chat_id, AFTER_SENT, reply_menu())
        reset_user(chat_id)
        return

    if st == "diag_wait_text":
        name = (from_user.get("first_name") or "").strip() or "‚Äî"
        username = from_user.get("username") or ""
        user_leads[chat_id] = {"name": name, "username": username, "text": f"[–î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê] {t}"}
        admin_text = admin_lead_text(chat_id, name, username, f"[–î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê] {t}")
        send_msg(ADMIN_ID, admin_text, ikb_lead_controls(chat_id))
        send_msg(chat_id, AFTER_SENT, reply_menu())
        reset_user(chat_id)
        return

    # –¥–µ—Ñ–æ–ª—Ç: –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–µ–Ω—é + –ª–µ–≥–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    send_msg(chat_id, "–Ø –ø—Ä–∞—Ü—é—é –Ω–∞ Render –±–µ–∑ aiohttp üòâ\n–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ.", reply_menu())

def handle_callback(cb: Dict[str, Any]):
    data = cb.get("data") or ""
    cb_id = cb.get("id")
    msg = cb.get("message", {})
    m_chat_id = msg.get("chat", {}).get("id")
    m_id = msg.get("message_id")

    parts = data.split("|")
    if len(parts) != 3 or parts[0] != "lead":
        answer_cb(cb_id)
        return

    action, user_chat_id_s = parts[1], parts[2]
    try:
        user_chat_id = int(user_chat_id_s)
    except:
        answer_cb(cb_id, "–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É", True)
        return

    # –æ–Ω–æ–≤–ª—é—î–º–æ –∞–¥–º—ñ–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è + –ø–∏—à–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    if action == "accept":
        edit_msg(m_chat_id, m_id, msg.get("text", "") + "\n\n‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ø—Ä–∏–π–Ω—è—Ç–æ.")
        send_msg(user_chat_id, ACCEPT_MSG, reply_menu())
        answer_cb(cb_id, "–ü—Ä–∏–π–Ω—è—Ç–æ")
    elif action == "clarify":
        edit_msg(m_chat_id, m_id, msg.get("text", "") + "\n\n‚ùì <b>–°—Ç–∞—Ç—É—Å:</b> –∑–∞–ø–∏—Ç–∞–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–Ω—è.")
        send_msg(user_chat_id, CLARIFY_MSG, reply_menu())
        answer_cb(cb_id, "–ó–∞–ø–∏—Ç–∞–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–Ω—è")
    elif action == "reject":
        edit_msg(m_chat_id, m_id, msg.get("text", "") + "\n\n‚õî <b>–°—Ç–∞—Ç—É—Å:</b> –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        send_msg(user_chat_id, REJECT_MSG, reply_menu())
        answer_cb(cb_id, "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ")
    else:
        answer_cb(cb_id)

# ========= POLLING =========
def poller():
    global last_update_id
    # –ª–µ–≥–∫–µ –ø—ñ–¥—Å–≤—ñ–¥–æ–º–µ "warming up"
    time.sleep(2)
    while True:
        try:
            params = {"timeout": 25, "allowed_updates": ["message", "callback_query"]}
            if last_update_id:
                params["offset"] = last_update_id + 1
            r = requests.get(f"{TELEGRAM_API}/getUpdates", params=params, timeout=30)
            data = r.json()
            if not data.get("ok"):
                time.sleep(2)
                continue

            for upd in data.get("result", []):
                last_update_id = upd["update_id"]

                # callback
                if "callback_query" in upd:
                    handle_callback(upd["callback_query"])
                    continue

                # messages
                msg = upd.get("message")
                if not msg:
                    continue
                chat_id = msg["chat"]["id"]
                text = msg.get("text", "") or ""
                from_user = msg.get("from", {}) or {}
                handle_text(chat_id, text, from_user)

        except Exception as e:
            # —Ç–∏—Ö–∞ –ø–∞—É–∑–∞ —Ç–∞ –ø–æ–≤—Ç–æ—Ä
            time.sleep(2)

# ========= FASTAPI ROUTES =========
@app.get("/", response_class=PlainTextResponse)
def root():
    return "OK"

@app.get("/health", response_class=PlainTextResponse)
def health():
    return "healthy"

# –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–ª–ª–µ—Ä —É —Ñ–æ–Ω—ñ
def _run_poller_bg_once():
    th = threading.Thread(target=poller, daemon=True)
    th.start()

_run_poller_bg_once()
