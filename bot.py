# -*- coding: utf-8 -*-
# Katarsees Assistant ‚Äî aiogram 2.x

# ==== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø (—Ç–≤—ñ–π –ø—Ä–æ–¥–∞–∫—à–Ω) ====
TOKEN       = "8490324981:AAE4f89VWfWmhYzLa_jBw0FVubGFObbvIzw"     # —Ç–≤—ñ–π —Ç–æ–∫–µ–Ω
ADMIN_ID    = 6958130111                                           # —Ç–≤—ñ–π Telegram user_id
PAYMENT_LINK = "https://send.monobank.ua/jar/8tw85dr9Rb"           # –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É

# ==== –Ü–ú–ü–û–†–¢–ò ====
import html
import csv
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# ==== –§–ê–ô–õ–ò –ó–ê–Ø–í–û–ö ====
DIAG_CSV   = "leads.csv"          # –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
CONSULT_CSV= "consult_leads.csv"  # –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è
COURSE_CSV = "course_leads.csv"   # –Ω–∞–≤—á–∞–Ω–Ω—è

# ==== –°–¢–ê–ù–ò (–ø—Ä–æ—Å—Ç–∏–π —Ç—Ä–µ–∫–µ—Ä, –±–µ–∑ FSM) ====
awaiting_diag     = set()
awaiting_consult  = set()
awaiting_course   = set()

# ==== –ö–õ–ê–í–Ü–ê–¢–£–†–ò ====
def main_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üîÆ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"), KeyboardButton("üí∞ –û–ø–ª–∞—Ç–∞"))
    kb.row(KeyboardButton("üìö –ù–∞–≤—á–∞–Ω–Ω—è"))
    kb.row(KeyboardButton("üóìÔ∏è –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é"))
    return kb

def learning_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìù –ó–∞–ø–∏—Å –Ω–∞ –∫—É—Ä—Å"))
    kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

# ==== –•–ï–õ–ü–ï–†–ò ====
def admin_user_line(user: types.User) -> str:
    uname = f"@{user.username}" if user.username else "‚Äî"
    full  = user.full_name or "‚Äî"
    return f"{full}, {uname}"

def ensure_csv_header(filename: str, header: list):
    try:
        with open(filename, "r", encoding="utf-8-sig"):
            pass
    except FileNotFoundError:
        with open(filename, "w", newline="", encoding="utf-8-sig") as f:
            csv.writer(f).writerow(header)

def save_lead(filename: str, user: types.User, text: str, source: str):
    ensure_csv_header(
        filename,
        ["timestamp", "tg_id", "username", "full_name", "request", "source", "contact"]
    )
    with open(filename, "a", newline="", encoding="utf-8-sig") as f:
        w = csv.writer(f)
        w.writerow([
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            user.id,
            user.username or "",
            user.full_name or "",
            text,
            source,
            ""  # –ø–æ–ª–µ –ø—ñ–¥ –∫–æ–Ω—Ç–∞–∫—Ç, –ª–∏—à–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–º (–º–æ–∂–µ—à –∑–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ)
        ])

async def notify_admin(kind: str, user: types.User, text: str, extra: str = ""):
    # –§–æ—Ä–º—É—î–º–æ –∞–∫—É—Ä–∞—Ç–Ω–µ HTML-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º
    html_msg = (
        f"üîî <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ ({html.escape(kind)})!</b>\n"
        f"üë§ –Ü–º‚Äô—è: {html.escape(user.full_name or '‚Äî')}\n"
        f"üÜî ID: <code>{user.id}</code>\n"
        f"üó£Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {html.escape(admin_user_line(user))}\n"
        f"‚úçÔ∏è –¢–µ–∫—Å—Ç: <i>{html.escape(text)}</i>\n"
    )
    if extra:
        html_msg += f"{extra}\n"
    await bot.send_message(ADMIN_ID, html_msg, parse_mode=ParseMode.HTML)

# ==== –ë–û–¢/–î–ò–°–ü–ï–¢–ß–ï–† ====
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp  = Dispatcher(bot)

# ==== /start ====
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "üåï –í—ñ—Ç–∞—é! –Ø ‚Äî –ø–æ–º—ñ—á–Ω–∏—Ü—è Katarsees. –û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:",
        reply_markup=main_keyboard()
    )

# ==== –û–ü–õ–ê–¢–ê ====
@dp.message_handler(lambda m: m.text == "üí∞ –û–ø–ª–∞—Ç–∞")
async def pay(message: types.Message):
    await message.answer(
        f"üí≥ –û–ø–ª–∞—Ç–∞: {PAYMENT_LINK}\n\n–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é üåô",
    )

# ==== –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê ====
@dp.message_handler(lambda m: m.text == "üîÆ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
async def diag(message: types.Message):
    awaiting_consult.discard(message.from_user.id)
    awaiting_course.discard(message.from_user.id)
    awaiting_diag.add(message.from_user.id)
    await message.answer(
        "‚ú® –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ, —â–æ –≤–∞—Å —Ç—É—Ä–±—É—î. –Ø –ø–µ—Ä–µ–¥–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Katarsees üïØÔ∏è"
    )

# ==== –ó–ê–ü–ò–° –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Æ ====
@dp.message_handler(lambda m: m.text == "üóìÔ∏è –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
async def consult(message: types.Message):
    awaiting_diag.discard(message.from_user.id)
    awaiting_course.discard(message.from_user.id)
    awaiting_consult.add(message.from_user.id)
    await message.answer(
        "üìÖ –©–æ–± –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é, –Ω–∞–ø–∏—à—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π –¥–µ–Ω—å —ñ —á–∞—Å.\n"
        "Katarsees –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ üåô"
    )

# ==== –ù–ê–í–ß–ê–ù–ù–Ø ====
@dp.message_handler(lambda m: m.text == "üìö –ù–∞–≤—á–∞–Ω–Ω—è")
async def learning(message: types.Message):
    txt = (
        "‚ú® <b>–ù–∞–≤—á–∞–Ω–Ω—è –Ø—Å–Ω–æ–±–∞—á–µ–Ω–Ω—è —ñ –ú–µ–Ω—Ç–∞–ª—å–Ω–∞ –º–∞–≥—ñ—è</b>\n\n"
        "1Ô∏è‚É£ –ü–æ–≤–Ω–∏–π –∫—É—Ä—Å (3 –º—ñ—Å., —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ): <b>25 000‚Ç¥</b>/–º—ñ—Å\n"
        "2Ô∏è‚É£ –ì—Ä—É–ø–∞ (—Å–∞–º–æ—Å—Ç—ñ–π–Ω–µ): <b>5 000‚Ç¥</b>/–º—ñ—Å\n"
        "3Ô∏è‚É£ –û–¥–∏–Ω —É—Ä–æ–∫: <b>1 000‚Ç¥</b>\n\n"
        "Instagram-–±–æ–Ω—É—Å: –Ω–∞–ø–∏—à—ñ—Ç—å —Å–ª–æ–≤–æ <b>INSTAZNIJKA</b> ‚Äî —ñ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –∑–Ω–∏–∂–∫—É üåô\n\n"
        "–©–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üìù –ó–∞–ø–∏—Å –Ω–∞ –∫—É—Ä—Å¬ª."
    )
    await message.answer(txt, reply_markup=learning_keyboard())

@dp.message_handler(lambda m: m.text == "üìù –ó–∞–ø–∏—Å –Ω–∞ –∫—É—Ä—Å")
async def learning_register(message: types.Message):
    awaiting_diag.discard(message.from_user.id)
    awaiting_consult.discard(message.from_user.id)
    awaiting_course.add(message.from_user.id)
    await message.answer(
        "üßò –í–∫–∞–∂—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç (–ø–æ–≤–Ω–∏–π –∫—É—Ä—Å / –≥—Ä—É–ø–∞ / –æ–¥–∏–Ω —É—Ä–æ–∫), —Å–≤–æ—î —ñ–º‚Äô—è —Ç–∞ @username –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω.\n"
        "Katarsees –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º üåï"
    )

@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    awaiting_diag.discard(message.from_user.id)
    awaiting_consult.discard(message.from_user.id)
    awaiting_course.discard(message.from_user.id)
    await message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=main_keyboard())

# ==== –ö–ï–ß-–û–õ–õ: –ø—Ä–∏–π–º–∞—î —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –¥—ñ—ó ====
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def catch_all_text(message: types.Message):
    uid = message.from_user.id
    txt = message.text.strip()

    # 1) –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if uid in awaiting_diag:
        save_lead(DIAG_CSV, message.from_user, txt, "diagnostics")
        await notify_admin("–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", message.from_user, txt)
        awaiting_diag.discard(uid)
        await message.answer("‚úÖ –î—è–∫—É—é! –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ Katarsees. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å üåô", reply_markup=main_keyboard())
        return

    # 2) –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è
    if uid in awaiting_consult:
        save_lead(CONSULT_CSV, message.from_user, txt, "consult")
        await notify_admin("–∑–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é", message.from_user, txt)
        awaiting_consult.discard(uid)
        await message.answer("‚úÖ –ó–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è üåô", reply_markup=main_keyboard())
        return

    # 3) –ù–∞–≤—á–∞–Ω–Ω—è
    if uid in awaiting_course:
        save_lead(COURSE_CSV, message.from_user, txt, "learning")
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Å—Ç–∞–≥—Ä–∞–º-–∑–Ω–∏–∂–∫–∏
        extra = ""
        if "instaznijka".lower() in txt.lower():
            extra = "üåü –ó–Ω–∏–∂–∫–∞: INSTAZNIJKA"
        await notify_admin("–Ω–∞–≤—á–∞–Ω–Ω—è", message.from_user, txt, extra)
        awaiting_course.discard(uid)
        await message.answer("‚úÖ –î—è–∫—É—é! –ó–∞—è–≤–∫—É –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ. Katarsees –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ üåô", reply_markup=main_keyboard())
        return

    # –Ø–∫—â–æ –ª—é–¥–∏–Ω–∞ –ø–∏—à–µ —â–æ—Å—å –±–µ–∑ –≤–∏–±–æ—Ä—É —Ä–æ–∑–¥—ñ–ª—É
    if txt.lower() in {"/start", "start", "/start@Katarsees_bot"}:
        await cmd_start(message)
        return

    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ ‚¨áÔ∏è", reply_markup=main_keyboard())

# ==== –¢–ï–°–¢ –î–õ–Ø –ê–î–ú–Ü–ù–ê (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ü–ú) ====
@dp.message_handler(commands=["test_alert"])
async def test_alert(message: types.Message):
    await notify_admin("–¢–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", message.from_user, "–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    await message.answer("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º.")

# ==== –ó–ê–ü–£–°–ö ====
import asyncio

if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è‚Ä¶")
    # —Å—Ç–≤–æ—Ä—é—î–º–æ —ñ —Ä–µ—î—Å—Ç—Ä—É—î–º–æ –ø–æ–¥—ñ—î–≤–∏–π —Ü–∏–∫–ª –≤—Ä—É—á–Ω—É (–ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è Python 3.11)
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    from aiogram.utils import executor
    executor.start_polling(dp, skip_updates=True)
