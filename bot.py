# bot.py
import os
from typing import Optional

from fastapi import FastAPI, Request, Response
from fastapi.responses import JSONResponse
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Update, Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

# ========= ENV =========
BOT_TOKEN: str = os.getenv("BOT_TOKEN", "").strip()
ADMIN_ID_RAW: str = os.getenv("ADMIN_ID", "").strip()
WEBHOOK_SECRET: str = os.getenv("WEBHOOK_SECRET", "").strip()

if not BOT_TOKEN:
    raise RuntimeError("Set BOT_TOKEN in Environment")
if not ADMIN_ID_RAW.isdigit():
    raise RuntimeError("Set ADMIN_ID (numeric Telegram ID) in Environment")
if not WEBHOOK_SECRET:
    raise RuntimeError("Set WEBHOOK_SECRET in Environment")

ADMIN_ID: int = int(ADMIN_ID_RAW)

# ========= AIOGRAM CORE =========
bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# ========= KEYBOARDS =========
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîÆ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"), KeyboardButton(text="üìö –ù–∞–≤—á–∞–Ω–Ω—è")],
        [KeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∞")],
        [KeyboardButton(text="üóìÔ∏è –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")],
    ],
    resize_keyboard=True
)

back_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)

def admin_decision_kb(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"decide:ok:{user_id}"),
            InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"decide:no:{user_id}"),
        ],
        [
            InlineKeyboardButton(text="‚úçÔ∏è –£—Ç–æ—á–Ω–∏—Ç–∏", callback_data=f"decide:ask:{user_id}")
        ]
    ])

# ========= STATES =========
class Form(StatesGroup):
    waiting_request = State()   # –∫–ª—ñ—î–Ω—Ç –ø–∏—à–µ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–∑–∞—è–≤–∫—É

# ========= BASIC HANDLERS =========
@dp.message(F.text == "/start")
async def cmd_start(msg: Message):
    await msg.answer(
        "–í—ñ—Ç–∞—é! –Ø –∞—Å–∏—Å—Ç–µ–Ω—Ç. –û–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ ‚Äî –∞–±–æ –Ω–∞–ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
        reply_markup=main_kb
    )

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=main_kb)

@dp.message(F.text == "üîÆ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
async def diagnostics_info(msg: Message):
    text = (
        "‚ú® –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ, —â–æ –≤–∞—Å —Ç—É—Ä–±—É—î ‚Äî —ñ —è –ø–µ—Ä–µ–¥–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Katarsees.\n"
        "–ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ @username –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–≤ º—è–∑–∫—É."
    )
    await msg.answer(text, reply_markup=back_kb)

@dp.message(F.text == "üìö –ù–∞–≤—á–∞–Ω–Ω—è")
async def education_info(msg: Message):
    text = (
        "üìö –ù–∞–≤—á–∞–Ω–Ω—è: –ø–æ–≤–Ω–∏–π –∫—É—Ä—Å / –≥—Ä—É–ø–∞ / —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ / –æ–¥–∏–Ω —É—Ä–æ–∫.\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç, —Å–≤–æ—î —ñ–º º—è —Ç–∞ @username/—Ç–µ–ª–µ—Ñ–æ–Ω ‚Äî Katarsees –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
    )
    await msg.answer(text, reply_markup=back_kb)

@dp.message(F.text == "üí∞ –û–ø–ª–∞—Ç–∞")
async def payment_info(msg: Message):
    text = (
        "üí≥ –û–ø–ª–∞—Ç–∞: —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ –ø—ñ—Å–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É.\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –∑–∞–ø–∏—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üóìÔ∏è –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é¬ª."
    )
    await msg.answer(text, reply_markup=back_kb)

@dp.message(F.text == "üóìÔ∏è –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
async def start_request(msg: Message, state: FSMContext):
    await state.set_state(Form.waiting_request)
    text = (
        "üìù –ù–∞–ø–∏—à—ñ—Ç—å –û–î–ù–ò–ú –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:\n"
        "‚Ä¢ –Ü–º º—è\n"
        "‚Ä¢ @username –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω\n"
        "‚Ä¢ –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ (–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞/–Ω–∞–≤—á–∞–Ω–Ω—è/—ñ–Ω—à–µ)\n"
        "‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –∑–∞–ø–∏—Ç—É\n\n"
        "–ü—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è ‚Äî —è –ø–µ—Ä–µ–¥–∞–º –∑–∞—è–≤–∫—É —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Å—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é üïØÔ∏è"
    )
    await msg.answer(text, reply_markup=back_kb)

# –ª–æ–≤–∏–º–æ –∑–∞—è–≤–∫—É
@dp.message(Form.waiting_request, F.text)
async def catch_request(msg: Message, state: FSMContext):
    await state.clear()

    user = msg.from_user
    uid = user.id
    uname = ("@" + user.username) if user.username else "‚Äî"
    full_name = user.full_name

    # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
    await msg.answer("–î—è–∫—É—é! –ó–∞—è–≤–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ üïØÔ∏è", reply_markup=main_kb)

    # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–æ–≤—ñ
    admin_text = (
        "üîî <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞!</b>\n"
        f"üë§ <b>–Ü–º º—è:</b> {full_name}\n"
        f"üÜî <b>ID:</b> <code>{uid}</code>\n"
        f"üì£ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {uname}\n"
        f"üñã <b>–¢–µ–∫—Å—Ç:</b> {msg.text}"
    )

    try:
        await bot.send_message(
            ADMIN_ID, admin_text, reply_markup=admin_decision_kb(uid)
        )
    except Exception:
        # —è–∫—â–æ ADMIN_ID –Ω–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω–æ–≤—ñ
        pass

# —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤—Å—è–∫–∏–π —Ç–µ–∫—Å—Ç –ø–æ–∑–∞ —Å—Ç–∞–Ω–∞–º–∏
@dp.message()
async def fallback(msg: Message):
    await msg.answer("–Ø –ø–æ—á—É–≤(–ª–∞) –≤–∞—Å. –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üóìÔ∏è –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é¬ª.",
                     reply_markup=main_kb)

# ========= ADMIN CALLBACKS =========
@dp.callback_query(F.data.startswith("decide:"))
async def on_decide(cb: CallbackQuery):
    # –¥–æ–∑–≤–æ–ª—è—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–æ–≤—ñ
    if cb.from_user.id != ADMIN_ID:
        await cb.answer("–õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    try:
        _, action, user_id_str = cb.data.split(":")
        target_id = int(user_id_str)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.", show_alert=True)
        return

    if action == "ok":
        await bot.send_message(target_id,
                               "‚úÖ –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ. Katarsees –Ω–µ–∑–∞–±–∞—Ä–æ–º –∑ º—è–≤–∏—Ç—å—Å—è –∑ –¥–µ—Ç–∞–ª—è–º–∏.")
        await cb.message.answer("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
        await cb.answer()
    elif action == "no":
        await bot.send_message(target_id,
                               "‚ùå –ù–∞ –∂–∞–ª—å, –Ω–∞—Ä–∞–∑—ñ –Ω–µ –º–æ–∂—É –≤–∑—è—Ç–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É. "
                               "–ú–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ —É—Ç–æ—á–Ω–∏—Ç–∏ —Ñ–æ—Ä–º–∞—Ç.")
        await cb.message.answer("‚ùå –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
        await cb.answer()
    elif action == "ask":
        await bot.send_message(target_id,
                               "‚úçÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å, —â–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —É—Ç–æ—á–Ω–∏—Ç–∏ ‚Äî —ñ —è –ø–µ—Ä–µ–¥–∞–º Katarsees.")
        await cb.message.answer("‚úçÔ∏è –ó–∞–ø–∏—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—É.")
        await cb.answer()
    else:
        await cb.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.", show_alert=True)

# ========= FASTAPI =========
@app.get("/")
async def root():
    return {"status": "ok"}

# –í–ê–ñ–õ–ò–í–û: –º–∞—Ä—à—Ä—É—Ç –≤–µ–±—Ö—É–∫–∞ —ñ—Å–Ω—É—î –∑–∞–≤–∂–¥–∏ ‚Üí –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ 404
@app.post("/webhook/{secret:path}")
async def telegram_webhook(secret: str, request: Request):
    # —è–∫—â–æ —Å–µ–∫—Ä–µ—Ç –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 403 (–∞ –Ω–µ 404),
    # —â–æ–± Telegram –±–∞—á–∏–≤ —ñ—Å–Ω—É—é—á—É –∫—ñ–Ω—Ü–µ–≤—É —Ç–æ—á–∫—É
    if secret != WEBHOOK_SECRET:
        return Response(status_code=403)

    data = await request.json()
    update = Update.model_validate(data, context={"bot": bot})
    await dp.feed_webhook_update(bot, update)
    return JSONResponse({"ok": True})
