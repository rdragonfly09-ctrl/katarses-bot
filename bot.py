import os
import logging
from typing import Final

from fastapi import FastAPI, Request, HTTPException
import uvicorn

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

# ----------------- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø -----------------
logging.basicConfig(level=logging.INFO)

BOT_TOKEN: Final = os.getenv("BOT_TOKEN", "").strip()
BASE_URL:  Final = os.getenv("BASE_URL", "").strip().rstrip("/")
WEBHOOK_SECRET: Final = os.getenv("WEBHOOK_SECRET", "katars3es_42")

if not BOT_TOKEN or not BASE_URL:
    # –†–æ–±–∏–º–æ –∑—Ä–æ–∑—É–º—ñ–ª—É –ø–æ–º–∏–ª–∫—É –≤ –ª–æ–≥–∞—Ö Render
    raise RuntimeError("–í–∫–∞–∂–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN —ñ BASE_URL")

bot = Bot(BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
r = Router()
dp.include_router(r)

app = FastAPI(title="Katarsees Assistant")

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{BASE_URL}{WEBHOOK_PATH}"

# ----------------- –ö–õ–ê–í–Ü–ê–¢–£–†–ê -----------------
def main_inline_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÆ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="act:diag"),
            InlineKeyboardButton(text="üíµ –û–ø–ª–∞—Ç–∞", callback_data="act:pay"),
        ],
        [
            InlineKeyboardButton(text="üìö –ù–∞–≤—á–∞–Ω–Ω—è", callback_data="act:study"),
            InlineKeyboardButton(text="üóìÔ∏è –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é", callback_data="act:consult"),
        ],
        [
            InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å –Ω–∞ –∫—É—Ä—Å", callback_data="act:course"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back"),
        ],
    ])

WELCOME_TEXT = (
    "–í—ñ—Ç–∞—é! –û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ üëá\n\n"
    "–Ø–∫—â–æ –∫–Ω–æ–ø–∫–∏ –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ /start —â–µ —Ä–∞–∑."
)

# ----------------- –•–ï–ù–î–õ–ï–†–ò -----------------
@r.message(CommandStart())
async def on_start(m: types.Message):
    await m.answer(WELCOME_TEXT, reply_markup=main_inline_kb())

async def _answer_and_menu(message: types.Message, text: str):
    await message.answer(text)
    await message.answer("–©–æ —Ä–æ–±–∏–º–æ –¥–∞–ª—ñ?", reply_markup=main_inline_kb())

# –§—ñ–ª—å—Ç—Ä—É—î–º–æ callback-–∏ –±–µ–∑ 'Text': —á–µ—Ä–µ–∑ F.data.startswith(...)
@r.callback_query(F.data.startswith("act:"))
async def on_action(cb: types.CallbackQuery):
    action = cb.data.split(":", 1)[1]
    await cb.answer()
    if action == "diag":
        await _answer_and_menu(cb.message, "üîÆ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –Ω–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –∑–∞–ø–∏—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–µ.")
    elif action == "pay":
        await _answer_and_menu(cb.message, "üíµ –û–ø–ª–∞—Ç–∞: —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ —Ç–∞ —É–º–æ–≤–∏ –Ω–∞–¥—ñ—à–ª—é –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏.")
    elif action == "study":
        await _answer_and_menu(cb.message, "üìö –ù–∞–≤—á–∞–Ω–Ω—è: –∫—É—Ä—Å ‚Äî –≥—Ä—É–ø–∞ 8 –º—ñ—Å, —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ 3 –º—ñ—Å.")
    elif action == "consult":
        await _answer_and_menu(cb.message, "üóìÔ∏è –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é: –Ω–∞–ø–∏—à—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π –¥–µ–Ω—å/—á–∞—Å, —è –ø—ñ–¥–±–µ—Ä—É —Å–ª–æ—Ç.")
    elif action == "course":
        await _answer_and_menu(cb.message, "üìù –ó–∞–ø–∏—Å –Ω–∞ –∫—É—Ä—Å: –∑–∞–ª–∏—à—Ç–µ —ñ–º'—è, –Ω—ñ–∫ —É TG/IG —ñ –∫–æ—Ä–æ—Ç–∫—É –º–æ—Ç–∏–≤–∞—Ü—ñ—é.")
    else:
        await _answer_and_menu(cb.message, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")

@r.callback_query(F.data == "nav:back")
async def on_back(cb: types.CallbackQuery):
    await cb.answer()
    try:
        await cb.message.edit_text(WELCOME_TEXT, reply_markup=main_inline_kb())
    except TelegramBadRequest:
        await cb.message.answer(WELCOME_TEXT, reply_markup=main_inline_kb())

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –±—É–¥—å-—è–∫–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤, —â–æ–± –¥—ñ–∞–≥–Ω–æ—Å—Ç—É–≤–∞—Ç–∏ ‚Äú–Ω–µ –ª–æ–≤–∏—Ç—å—Å—è‚Äù
@r.message(F.text)
async def on_text(m: types.Message):
    logging.info(f"text from {m.from_user.id}: {m.text!r}")
    await m.answer("–Ø –≤–∞—Å –ø–æ—á—É–ª–∞. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂—á–µ üëá", reply_markup=main_inline_kb())

# ----------------- –í–ï–ë–•–£–ö -----------------
@app.on_event("startup")
async def on_startup():
    # –ó–Ω—ñ–º–∞—î–º–æ —Å—Ç–∞—Ä–∏–π –≤–µ–±—Ö—É–∫ (—ñ –≥–ª—É—à–∏–º–æ ‚Äú–¥—É–±–ª—å-–µ–∫–∑–µ–º–ø–ª—è—Ä–∏‚Äù)
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)
    info = await bot.get_webhook_info()
    logging.info(f"Webhook set to: {info.url}")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()

@app.get("/health")
async def health():
    return {"ok": True, "webhook": WEBHOOK_URL}

@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    try:
        update = types.Update.model_validate(await request.json(), context={"bot": bot})
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Bad request: {e}")
    await dp.feed_update(bot, update)
    return {"ok": True}

# ----------------- –õ–û–ö–ê–õ–¨–ù–ò–ô –ó–ê–ü–£–°–ö -----------------
if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=int(os.getenv("PORT", "8000")))
