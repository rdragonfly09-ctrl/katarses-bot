import os
import requests
from fastapi import FastAPI, Request, HTTPException, Header

# ===== ENV =====
BOT_TOKEN = os.environ["BOT_TOKEN"]
BASE_URL = os.environ["BASE_URL"].rstrip("/")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")
ADMIN_ID = os.getenv("ADMIN_ID")  # —Ä—è–¥–∫–æ–º, –Ω–∞–ø—Ä. "6958130111"

API = f"https://api.telegram.org/bot{BOT_TOKEN}"

app = FastAPI(title="Katarsees Assistant")

# ===== helpers =====
def tg_call(method: str, payload: dict, timeout=15):
    try:
        return requests.post(f"{API}/{method}", json=payload, timeout=timeout)
    except Exception:
        return None

def send_msg(chat_id: int, text: str, kb: dict | None = None):
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }
    if kb:
        data["reply_markup"] = kb
    tg_call("sendMessage", data)

def edit_msg(chat_id: int, message_id: int, text: str, ikb: dict | None = None):
    data = {
        "chat_id": chat_id,
        "message_id": message_id,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }
    if ikb:
        data["reply_markup"] = ikb
    tg_call("editMessageText", data)

def answer_cbq(cb_id: str, text: str = "", alert: bool = False):
    tg_call("answerCallbackQuery", {"callback_query_id": cb_id, "text": text, "show_alert": alert})

def set_webhook(url: str) -> bool:
    payload = {"url": url}
    if WEBHOOK_SECRET:
        payload["secret_token"] = WEBHOOK_SECRET
    r = tg_call("setWebhook", payload)
    try:
        return bool(r and r.json().get("ok"))
    except Exception:
        return False

def kb_main():
    return {
        "keyboard": [
            [{"text": "üìù –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É"}],
            [{"text": "üîÆ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–æ–ø–∏—Å)"}],
            [{"text": "üïØ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞"}],
            [{"text": "‚¨ÖÔ∏è –ú–µ–Ω—é"}],
        ],
        "resize_keyboard": True,
    }

def ikb_lead_controls(user_chat_id: int):
    # —É callback_data –∫–æ–¥—É—î–º–æ –¥—ñ—é —Ç–∞ chat_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    return {
        "inline_keyboard": [[
            {"text": "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", "callback_data": f"lead|accept|{user_chat_id}"},
            {"text": "‚ùì –£—Ç–æ—á–Ω–∏—Ç–∏", "callback_data": f"lead|clarify|{user_chat_id}"},
            {"text": "‚õî –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", "callback_data": f"lead|reject|{user_chat_id}"},
        ]]
    }

# ===== FastAPI lifecycle =====
@app.on_event("startup")
def on_startup():
    wh = f"{BASE_URL}/webhook/{BOT_TOKEN}"
    ok = set_webhook(wh)
    print("Webhook set:" if ok else "Failed to set webhook", wh)

def verify_secret(header_token):
    if not WEBHOOK_SECRET:
        return
    if header_token != WEBHOOK_SECRET:
        raise HTTPException(status_code=401, detail="Invalid secret token")

# ===== handlers =====
@app.post("/webhook/{token}")
async def webhook(token: str, request: Request,
                  x_telegram_bot_api_secret_token: str | None = Header(None)):
    if token != BOT_TOKEN:
        raise HTTPException(status_code=403, detail="Bad token")
    verify_secret(x_telegram_bot_api_secret_token)

    upd = await request.json()

    # --- callback from admin buttons ---
    if "callback_query" in upd:
        cb = upd["callback_query"]
        cb_id = cb["id"]
        from_id = cb["from"]["id"]
        data = cb.get("data", "")

        if not ADMIN_ID or str(from_id) != str(ADMIN_ID):
            answer_cbq(cb_id, "–õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", alert=True)
            return {"ok": True}

        if data.startswith("lead|"):
            try:
                _, action, user_chat_str = data.split("|")
                user_chat_id = int(user_chat_str)
            except Exception:
                answer_cbq(cb_id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.", alert=True)
                return {"ok": True}

            msg = cb.get("message", {})
            admin_chat = msg["chat"]["id"]
            admin_msg_id = msg["message_id"]
            original_text = msg.get("text", "")

            status_map = {
                "accept": "‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ü—Ä–∏–π–Ω—è—Ç–æ",
                "clarify": "‚ùì <b>–°—Ç–∞—Ç—É—Å:</b> –£—Ç–æ—á–Ω–∏—Ç–∏",
                "reject": "‚õî <b>–°—Ç–∞—Ç—É—Å:</b> –í—ñ–¥—Ö–∏–ª–µ–Ω–æ",
            }
            status_line = status_map.get(action, "")

            # 1) –æ–Ω–æ–≤–ª—é—î–º–æ –∞–¥–º—ñ–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∑–∞–ª–∏—à–∏–º–æ –∫–Ω–æ–ø–∫–∏ –∞–±–æ –ø—Ä–∏–±–µ—Ä–µ–º–æ ‚Äî –Ω–∞ —Ç–≤—ñ–π —Å–º–∞–∫)
            edit_msg(admin_chat, admin_msg_id, f"{original_text}\n\n{status_line}")

            # 2) –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if action == "accept":
                send_msg(user_chat_id,
                    "–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞ ‚úÖ\n"
                    "–ù–µ–∑–∞–±–∞—Ä–æ–º –æ—Ç—Ä–∏–º–∞—î—à –ø–æ–¥–∞–ª—å—à—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó üïØ")
            elif action == "clarify":
                send_msg(user_chat_id,
                    "–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π ‚ùì\n"
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:\n"
                    "‚Ä¢ –°—É—Ç—å –∑–∞–ø–∏—Ç—É (1‚Äì2 —Ä–µ—á–µ–Ω–Ω—è)\n"
                    "‚Ä¢ –°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É —Ü–µ —Ç—Ä–∏–≤–∞—î?\n"
                    "‚Ä¢ –©–æ –≤–∂–µ –ø—Ä–æ–±—É–≤–∞–ª–∞ —Ä–æ–±–∏—Ç–∏?\n")
            elif action == "reject":
                send_msg(user_chat_id,
                    "–ó–∞—Ä–∞–∑ –Ω–µ –º–æ–∂—É –≤–∑—è—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Ç ‚õî\n"
                    "–ú–æ–∂–µ—à —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ —ñ–Ω–∞–∫—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –ø—ñ–∑–Ω—ñ—à–µ.")

            answer_cbq(cb_id, "–ì–æ—Ç–æ–≤–æ")
        return {"ok": True}

    # --- messages ---
    if "message" in upd:
        msg = upd["message"]
        chat_id = msg["chat"]["id"]
        text = (msg.get("text") or "").strip()
        user = msg.get("from", {})
        username = user.get("username") or "‚Äî"
        name = (" ".join([user.get("first_name",""), user.get("last_name","")])).strip() or "‚Äî"

        low = text.lower()

        if text.startswith("/start") or low == "‚¨ÖÔ∏è –º–µ–Ω—é":
            send_msg(chat_id,
                "–í—ñ—Ç–∞—é, –î—É—à–µ üåï\n\n"
                "–Ø ‚Äî –ê—Å–∏—Å—Ç–µ–Ω—Ç <b>Katarsees</b>. –Ø –ø—Ä–æ–≤–µ–¥—É —Ç–µ–±–µ –∫—Ä—ñ–∑—å –ø–æ—Ç—ñ–∫, —É —è–∫–æ–º—É –ø—Ä–æ–±—É–¥–∂—É—î—Ç—å—Å—è –°–∏–ª–∞.\n\n"
                "–û–±–µ—Ä–∏, —â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–∞–∑:",
                kb_main()
            )
            return {"ok": True}

        if "–ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É" in low:
            send_msg(chat_id,
                "–ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ üåø\n\n"
                "–ù–∞–ø–∏—à–∏ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:\n"
                "‚Ä¢ –Ü–º‚Äô—è\n"
                "‚Ä¢ @–Ω—ñ–∫ –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å/–∫–∞–Ω–∞–ª\n"
                "‚Ä¢ –©–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ (–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ / –Ω–∞–≤—á–∞–Ω–Ω—è / —ñ–Ω—à–µ)\n"
                "‚Ä¢ –ö—ñ–ª—å–∫–∞ —Å–ª—ñ–≤ ‚Äî <i>—á–æ–º—É –≤—ñ–¥–≥—É–∫–Ω—É–ª–æ—Å—è —Å–∞–º–µ –∑–∞—Ä–∞–∑</i> üí´\n\n"
                "–ü–∏—à–∏ —á–µ—Å–Ω–æ. –¢—É—Ç —Ç–µ–±–µ —á—É—é—Ç—å.",
                kb_main()
            )
            return {"ok": True}

        if "–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–æ–ø–∏—Å)" in low:
            send_msg(chat_id,
                "–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚Äî —Ü–µ –¥–∑–µ—Ä–∫–∞–ª–æ –î—É—à—ñ üïØÔ∏è\n\n"
                "–ß–µ—Ä–µ–∑ –µ–Ω–µ—Ä–≥—ñ—é –≤–∏–¥–Ω–æ, –¥–µ —Ç–∏ –≤—Ç—Ä–∞—Ç–∏–ª–∞ —Å–µ–±–µ, —â–æ –≤–∏—Å–Ω–∞–∂—É—î, —ñ –¥–µ —Å—Ö–æ–≤–∞–Ω–∞ —Ç–≤–æ—è —Å–ø—Ä–∞–≤–∂–Ω—è —Å–∏–ª–∞.\n"
                "–•–æ—á–µ—à, —è –ø–æ—è—Å–Ω—é –∫–æ—Ä–æ—Ç–∫–æ, —è–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ—Å? ‚Äî –Ω–∞–ø–∏—à–∏ ¬´—Ç–∞–∫¬ª.",
                kb_main()
            )
            return {"ok": True}

        if "–ø—ñ–¥—Ç—Ä–∏–º–∫–∞" in low:
            send_msg(chat_id,
                "–¢–∏ –Ω–µ –æ–¥–Ω–∞ üíú\n\n"
                "–ù–∞–ø–∏—à–∏, —â–æ —Ç–µ–±–µ —Ç—É—Ä–±—É—î ‚Äî —ñ —è –ø–µ—Ä–µ–¥–∞–º —Ü–µ –≤ –ø–æ—Ç—ñ–∫ Katarsees.\n"
                "–ù–∞–≤—ñ—Ç—å —è–∫—â–æ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à –≤–∏–≥–æ–≤–æ—Ä–∏—Ç–∏—Å—å ‚Äî —Ü–µ –≤–∂–µ –ø–æ—á–∞—Ç–æ–∫ –æ—á–∏—â–µ–Ω–Ω—è.",
                kb_main()
            )
            return {"ok": True}

        # –í—Å—ñ —ñ–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –≤–≤–∞–∂–∞—î–º–æ –∑–∞—è–≤–∫–æ—é/–∑–≤–µ—Ä–Ω–µ–Ω–Ω—è–º
        if ADMIN_ID:
            admin_text = (
                "üì© <b>–ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è</b>\n"
                f"‚Ä¢ user: @{username} ({name})\n"
                f"‚Ä¢ chat_id: <code>{chat_id}</code>\n"
                f"‚Ä¢ text:\n{text}"
            )
            tg_call("sendMessage", {
                "chat_id": int(ADMIN_ID),
                "text": admin_text,
                "parse_mode": "HTML",
                "reply_markup": ikb_lead_controls(chat_id)
            })

        send_msg(chat_id, "–î—è–∫—É—é! –ó–∞—è–≤–∫—É/–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ üïØ", kb_main())

    return {"ok": True}

@app.get("/")
def root():
    return {"status": "ok"}
